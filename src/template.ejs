<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= npmReportTitle %>
  </title>
  <style>
    * {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }

    body {
      background-color: #f4f4f4;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      padding: 3rem;
    }

    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 2rem;
    }

    .info-block {
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 20px;
      margin: 10px 10px;
      min-width: 200px;
      max-width: 300px;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }

    .info-categories {
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
    }

    .vulnerability-category {
      background-color: #fff;
      border: 1px solid #ddd;
      margin: 10px;
      padding: 10px;
      min-width: 100px;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }

    .vulnerability-category strong,
    .info-block strong {
      margin-top: 7px;
    }

    .badge {
      display: inline-block;
      padding: 4px 20px;
      border-radius: 5px;
      font-weight: bold;
      color: #fff;
    }

    .critical {
      background-color: #dc3545;
    }

    .high {
      background-color: #ff7b00;
    }

    .moderate {
      background-color: #ffc107;
    }

    .low {
      background-color: #28a745;
    }

    .informative {
      background-color: #17a2b8;
    }

    .tag {
      background-color: #742eff;
      margin-bottom: 5px;
      margin-right: 5px;
    }

    table {
      width: 100%;
      max-width: 1200px;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th,
    td {
      border: 1px solid #ddd;
      padding: 6px 10px;
      text-align: left;
    }

    th {
      background-color: #f2f2f2;
      position: relative;
      cursor: pointer;
    }

    a {
      color: #007bff;
      text-decoration: none;
      cursor: pointer;
    }

    .sort-icon {
      position: absolute;
      right: 8px;
      top: 50%;
      transform: translateY(-50%);
      color: #acacac;
      font-weight: normal;
      font-size: 12px;
    }

    .sort-icon.asc {
      font-weight: bold;
      color: #000;
    }

    .sort-icon.desc {
      font-weight: bold;
      color: #000;
    }

    [data-title]:hover:after {
      opacity: 1;
      visibility: visible;
    }

    [data-title]:after {
      content: attr(data-title);
      background-color: white;
      color: #2b2b2b;
      font-size: 75%;
      position: absolute;
      padding: 4px 6px;
      border-radius: 4px;
      bottom: 30px;
      left: -40%;
      white-space: nowrap;
      /* box-shadow: 1px 1px 4px #585858; */
      opacity: 0;
      border: 1px solid #6a6a6a;
      z-index: 100;
      visibility: hidden;
      font-weight: 500;
    }

    [data-title] {
      position: relative;
    }

    input[type="text"] {
      width: 100%;
      max-width: 800px;
      padding: 10px 15px;
      margin-bottom: 20px;
      margin-top: 15px;
      border: 1px solid #ddd;
      border-radius: 10px;
      font-size: 16px;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      outline: none;
    }

    input[type="text"]::placeholder {
      color: #999;
    }

    input[type="text"]:focus {
      border-color: #007bff;
    }
  </style>
</head>

<body>

  <h1>
    <%= npmReportTitle %>
  </h1>

  <div class="info-categories">
    <div class="info-block">
      <p>Vulnerabilities Found:</p> <strong>
        <%= vulnsFound %>
      </strong>
    </div>
    <div class="info-block">
      <p>Vulnerable Dependencies:</p> <strong>
        <%= vulnerableDependencies %>
      </strong>
    </div>
    <div class="info-block">
      <p>Generated at:</p> <strong>
        <%= currentDate %>
      </strong>
    </div>
  </div>

  <div class="info-categories">
    <div class="vulnerability-category">
      <p>Critical:</p> <strong class="badge critical">
        <%= criticalVulns %>
      </strong>
    </div>
    <div class="vulnerability-category">
      <p>High:</p> <strong class="badge high">
        <%= highVulns %>
      </strong>
    </div>
    <div class="vulnerability-category">
      <p>Moderate:</p> <strong class="badge moderate">
        <%= moderateVulns %>
      </strong>
    </div>
    <div class="vulnerability-category">
      <p>Low:</p> <strong class="badge low">
        <%= lowVulns %>
      </strong>
    </div>
    <div class="vulnerability-category">
      <p>Informative:</p> <strong class="badge informative">
        <%= infoVulns %>
      </strong>
    </div>
  </div>

  <!-- Add a search input field -->
  <div>
    <input type="text" id="search-input" placeholder="Search by Title or Package" onkeyup="filterTable()">
  </div>

  <table id="sortable-table">
    <thead>
      <tr>
        <th onclick="sortTable(0, this)">Title<span class="sort-icon">▼</span></th>
        <th onclick="sortTable(1, this)">Package Name<span class="sort-icon">▼</span></th>
        <th onclick="sortTable(2, this)">Severity<span class="sort-icon desc">▲</span></th>
        <th onclick="sortTable(3, this)">Tags<span class="sort-icon desc">▼</span></th>
        <th onclick="sortTable(4, this)">Related CWEs and CVEs<span class="sort-icon">▼</span></th>
      </tr>
    </thead>
    <tbody id="vulnerability-table-body">
      <!-- The rows will be dynamically inserted here -->
    </tbody>
  </table>

  <script>
    let sortDirection = 1;

    function sortTable(columnIndex, header) {
      const table = document.getElementById("sortable-table");
      const rows = Array.from(table.getElementsByTagName("tr"));

      rows.shift(); // Remove the header row from the sorting

      rows.sort((a, b) => {
        const aValue = a.children[columnIndex].textContent.trim();
        const bValue = b.children[columnIndex].textContent.trim();

        if (!isNaN(aValue) && !isNaN(bValue)) {
          return sortDirection * (parseFloat(aValue) - parseFloat(bValue));
        } else {
          return sortDirection * aValue.localeCompare(bValue);
        }
      });

      const tbody = table.getElementsByTagName("tbody")[0];
      tbody.innerHTML = "";
      rows.forEach(row => {
        tbody.appendChild(row);
      });

      // Toggle sort direction for the next click
      sortDirection *= -1;

      // Update sort icons
      resetSortIcons();
      updateSortIcon(header);
    }

    function resetSortIcons() {
      const sortIcons = document.querySelectorAll('.sort-icon');
      sortIcons.forEach(icon => {
        icon.classList.remove('asc', 'desc');
      });
    }

    function updateSortIcon(header) {
      const sortIcon = header.querySelector('.sort-icon');

      // Clear existing content
      sortIcon.textContent = '';

      if (sortDirection === 1) {
        sortIcon.classList.remove('desc');
        sortIcon.classList.add('asc');
        sortIcon.textContent = '▼';
      } else {
        sortIcon.classList.remove('asc');
        sortIcon.classList.add('desc');
        sortIcon.textContent = '▲';
      }
    }

    let vulnerabilities = JSON.parse('<%- JSON.stringify(vulnerabilities) %>');

    function populateTable(vuln_list) {
      const tbody = document.getElementById('vulnerability-table-body');

      if (vuln_list.length > 0) {
        vuln_list.forEach(vuln => {
          const row = document.createElement('tr');

          row.innerHTML = `
            <td><a href="${vuln.link}">${vuln.name}</a></td>
            <td><a href="https://www.npmjs.com/package/${vuln.package}">${vuln.package}</a></td>
            <td><span class="badge ${vuln.severity}">
                <span style="display: none;">${vuln.severity_number}</span>
                ${vuln.severity}
              </span></td>
            <td>${vuln.tags.map(tag => `<span class="badge tag" ${tag === 'Fix Available' ? 'data-title="Run `npm audit fix` to fix this vulnerability"' : ''}>${tag}</span>`).join('')}</td>
            <td>${vuln.cwes}</td>
          `;
          tbody.appendChild(row);
        });
      } else {
        tbody.innerHTML = `
          <tr>
            <td colspan="5">
              <div style="width: 100%; text-align: center; opacity: 0.8;">
                <p>No vulnerabilities found!</p>
              </div>
            </td>
          </tr>
        `;
      }
    }

    // Function to filter the table based on search input
    function filterTable() {
      const searchInput = document.getElementById('search-input').value.toLowerCase();
      const table = document.getElementById('sortable-table');
      const rows = table.getElementsByTagName('tr');

      // Loop through table rows, skipping the header row
      for (let i = 1; i < rows.length; i++) {
        const title = rows[i].getElementsByTagName('td')[0].textContent.toLowerCase();
        const packageName = rows[i].getElementsByTagName('td')[1].textContent.toLowerCase();

        // Show or hide rows based on matching Title or Package Name
        if (title.includes(searchInput) || packageName.includes(searchInput)) {
          rows[i].style.display = '';
        } else {
          rows[i].style.display = 'none';
        }
      }
    }

    window.onload = function () {
      populateTable(vulnerabilities);
      sortTable(2, document.querySelector('#sortable-table th:nth-child(3)'));
    };
  </script>

</body>

</html>